#pragma once

//
// Created by Admin on 2022/10/25.
//

#ifndef GGXX_MOB_H
#define GGXX_MOB_H

#endif //GGXX_MOB_H
#include "Global.h"
#include "Actor.h"

class Mob : public Actor{
public:
    /*0*/ virtual bool hasComponent(class HashedString const &) const;
    /*7*/ virtual void outOfWorld();
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*9*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*13*/ virtual void _doInitialMove();
    /*14*/ virtual ~Mob();
    /*30*/ virtual float getInterpolatedBodyRot(float) const;
    /*31*/ virtual float getInterpolatedHeadRot(float) const;
    /*32*/ virtual float getInterpolatedBodyYaw(float) const;
    /*33*/ virtual float getYawSpeedInDegreesPerSecond() const;
    /*36*/ virtual void resetInterpolated();
    /*40*/ virtual void __unk_vfn_40();
    /*41*/ virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    /*43*/ virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    /*48*/ virtual void normalTick();
    /*49*/ virtual void baseTick();
    /*50*/ virtual void passengerTick();
    /*52*/ virtual bool startRiding(class Actor &);
    /*53*/ virtual void addPassenger(class Actor &);
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*84*/ virtual void __unk_vfn_84();
    /*87*/ virtual void __unk_vfn_87();
    /*91*/ virtual bool isImmobile() const;
    /*94*/ virtual bool isPickable();
    /*95*/ virtual void __unk_vfn_95();
    /*96*/ virtual bool isSleeping() const;
    /*97*/ virtual void setSleeping(bool);
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual bool isBlocking() const;
    /*102*/ virtual bool isAlive() const;
    /*105*/ virtual void __unk_vfn_105();
    /*106*/ virtual bool isSurfaceMob() const;
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*110*/ virtual void __unk_vfn_110();
    /*113*/ virtual void setTarget(class Actor *);
    /*115*/ virtual bool attack(class Actor &, enum ActorDamageCause const &);
    /*126*/ virtual bool canPowerJump() const;
    /*128*/ virtual bool isJumping() const;
    /*135*/ virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    /*136*/ virtual void animateHurt();
    /*137*/ virtual bool doFireHurt(int);
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*155*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*156*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*157*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*159*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    /*173*/ virtual bool canFreeze() const;
    /*181*/ virtual void __unk_vfn_181();
    /*185*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*193*/ virtual bool canBePulledIntoVehicle() const;
    /*194*/ virtual bool inCaravan() const;
    /*195*/ virtual void __unk_vfn_195();
    /*199*/ virtual void stopRiding(bool, bool, bool);
    /*202*/ virtual void buildDebugInfo(std::string &) const;
    /*207*/ virtual int getDeathTime() const;
    /*219*/ virtual void swing();
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*226*/ virtual float getYHeadRot() const;
    /*227*/ virtual void setYHeadRot(float);
    /*228*/ virtual float getYHeadRotO() const;
    /*229*/ virtual void setYHeadRotO(float);
    /*248*/ virtual void __unk_vfn_248();
    /*251*/ virtual void __unk_vfn_251();
    /*252*/ virtual void kill();
    /*253*/ virtual void die(class ActorDamageSource const &);
    /*254*/ virtual bool shouldDropDeathLoot() const;
    /*268*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*270*/ virtual void __unk_vfn_270();
    /*271*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*274*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*275*/ virtual void addAdditionalSaveData(class CompoundTag &) const;
    /*276*/ virtual void _playStepSound(class BlockPos const &, class Block const &);
    /*278*/ virtual void __unk_vfn_278();
    /*283*/ virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    /*284*/ virtual void _onSizeUpdated();
    /*285*/ virtual void __unk_vfn_285();
    /*286*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*287*/ virtual void spawnAnim();
    /*288*/ virtual void setSprinting(bool);
    /*289*/ virtual enum LevelSoundEvent getHurtSound();
    /*290*/ virtual enum LevelSoundEvent getDeathSound();
    /*291*/ virtual struct TextureUVCoordinateSet const * getItemInHandIcon(class ItemStack const &, int);
    /*292*/ virtual float getSpeed() const;
    /*293*/ virtual void setSpeed(float);
    /*294*/ virtual void hurtEffects(class ActorDamageSource const &, float, bool, bool);
    /*295*/ virtual float getMeleeWeaponDamageBonus(class Mob *);
    /*296*/ virtual int getMeleeKnockbackBonus();
    /*297*/ virtual void travel(float, float, float);
    /*298*/ virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    /*299*/ virtual void applyFinalFriction(float, bool);
    /*300*/ virtual void aiStep();
    /*301*/ virtual void aiStep(struct IMobMovementProxy &) const;
    /*302*/ virtual void pushActors();
    /*303*/ virtual void lookAt(class Actor *, float, float);
    /*304*/ virtual bool isLookingAtAnEntity();
    /*305*/ virtual bool checkSpawnRules(bool);
    /*306*/ virtual bool checkSpawnObstruction() const;
    /*307*/ virtual float getAttackAnim(float);
    /*308*/ virtual int getItemUseDuration() const;
    /*309*/ virtual float getItemUseStartupProgress() const;
    /*310*/ virtual float getItemUseIntervalProgress() const;
    /*311*/ virtual int getItemUseIntervalAxis() const;
    /*312*/ virtual int getTimeAlongSwing() const;
    /*313*/ virtual void __unk_vfn_313();
    /*314*/ virtual float getMaxHeadXRot();
    /*315*/ virtual bool isAlliedTo(class Mob *);
    /*316*/ virtual bool doHurtTarget(class Actor *, enum ActorDamageCause const &);
    /*317*/ virtual void __unk_vfn_317();
    /*318*/ virtual void leaveCaravan();
    /*319*/ virtual void joinCaravan(class Mob *);
    /*320*/ virtual bool hasCaravanTail() const;
    /*321*/ virtual struct ActorUniqueID getCaravanHead() const;
    /*322*/ virtual int getArmorValue() const;
    /*323*/ virtual float getArmorCoverPercentage() const;
    /*324*/ virtual int getToughnessValue() const;
    /*325*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*326*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*327*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*328*/ virtual void sendArmor(class std::bitset<4>);
    /*329*/ virtual void containerChanged(int);
    /*330*/ virtual void updateEquipment();
    /*331*/ virtual int clearEquipment();
    /*332*/ virtual std::vector<int> getAllArmorID() const;
    /*333*/ virtual std::vector<class ItemStack const *> getAllHand() const;
    /*334*/ virtual std::vector<class ItemStack const *> getAllEquipment() const;
    /*335*/ virtual int getArmorTypeHash();
    /*336*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    /*337*/ virtual void dropEquipmentOnDeath();
    /*338*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*339*/ virtual void sendInventory(bool);
    /*340*/ virtual float getDamageAfterEnchantReduction(class ActorDamageSource const &, float) const;
    /*341*/ virtual float getDamageAfterArmorReduction(class ActorDamageSource const &, float) const;
    /*342*/ virtual float getDamageAfterResistanceEffect(class ActorDamageSource const &, float) const;
    /*343*/ virtual bool createAIGoals();
    /*344*/ virtual void onBorn(class Actor &, class Actor &);
    /*345*/ virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const &);
    /*346*/ virtual void setTransitioningSitting(bool);
    /*347*/ virtual void attackAnimation(class Actor *, float);
    /*348*/ virtual int getAttackTime();
    /*349*/ virtual float _getWalkTargetValue(class BlockPos const &);
    /*350*/ virtual bool canExistWhenDisallowMob() const;
    /*351*/ virtual void __unk_vfn_351();
    /*352*/ virtual void ascendLadder();
    /*353*/ virtual void ascendBlockByJumping();
    /*354*/ virtual void descendBlockByCrouching();
    /*355*/ virtual void dropContainer();
    /*356*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*357*/ virtual void jumpFromGround();
    /*358*/ virtual void jumpFromGround(struct IMobMovementProxy &) const;
    /*359*/ virtual void updateAi();
    /*360*/ virtual void newServerAiStep();
    /*361*/ virtual void _serverAiMobStep();
    /*362*/ virtual void dropBags();
    /*363*/ virtual void tickDeath();
    /*364*/ virtual void updateGliding();
    /*365*/ virtual void __unk_vfn_365();
    /*366*/ virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const &, class Vec3 const &) const;
};