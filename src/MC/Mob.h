#pragma once

//
// Created by Admin on 2022/10/25.
//

#ifndef GGXX_MOB_H
#define GGXX_MOB_H

#endif //GGXX_MOB_H
#include "Global.h"
#include "Actor.h"

class Mob : public Actor{
public:
    /*0*/ virtual bool hasComponent(class HashedString const &) const;
    /*7*/ virtual void outOfWorld();
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*9*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*13*/ virtual void _doInitialMove();
    /*14*/ virtual ~Mob();
    /*30*/ virtual float getInterpolatedBodyRot(float) const;
    /*31*/ virtual float getInterpolatedHeadRot(float) const;
    /*32*/ virtual float getInterpolatedBodyYaw(float) const;
    /*33*/ virtual float getYawSpeedInDegreesPerSecond() const;
    /*36*/ virtual void resetInterpolated();
    /*40*/ virtual void __unk_vfn_40();
    /*41*/ virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    /*43*/ virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    /*48*/ virtual void normalTick();
    /*49*/ virtual void baseTick();
    /*50*/ virtual void passengerTick();
    /*52*/ virtual bool startRiding(class Actor &);
    /*53*/ virtual void addPassenger(class Actor &);
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*84*/ virtual void __unk_vfn_84();
    /*87*/ virtual void __unk_vfn_87();
    /*91*/ virtual bool isImmobile() const;
    /*94*/ virtual bool isPickable();
    /*95*/ virtual void __unk_vfn_95();
    /*96*/ virtual bool isSleeping() const;
    /*97*/ virtual void setSleeping(bool);
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual bool isBlocking() const;
    /*102*/ virtual bool isAlive() const;
    /*105*/ virtual void __unk_vfn_105();
    /*106*/ virtual bool isSurfaceMob() const;
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*110*/ virtual void __unk_vfn_110();
    /*113*/ virtual void setTarget(class Actor *);
    /*115*/ virtual bool attack(class Actor &, enum ActorDamageCause const &);
    /*126*/ virtual bool canPowerJump() const;
    /*128*/ virtual bool isJumping() const;
    /*135*/ virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    /*136*/ virtual void animateHurt();
    /*137*/ virtual bool doFireHurt(int);
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*155*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*156*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*157*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*159*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    /*173*/ virtual bool canFreeze() const;
    /*180*/ virtual bool canChangeDimensionsUsingPortal() const;
    /*181*/ virtual void __unk_vfn_181();
    /*185*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*193*/ virtual bool canBePulledIntoVehicle() const;
    /*194*/ virtual bool inCaravan() const;
    /*195*/ virtual void __unk_vfn_195();
    /*199*/ virtual void stopRiding(bool, bool, bool);
    /*202*/ virtual void buildDebugInfo(std::string &) const;
    /*207*/ virtual int getDeathTime() const;
    /*218*/ virtual void swing();
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*225*/ virtual float getYHeadRot() const;
    /*226*/ virtual void setYHeadRot(float);
    /*227*/ virtual float getYHeadRotO() const;
    /*228*/ virtual void setYHeadRotO(float);
    /*247*/ virtual void __unk_vfn_247();
    /*250*/ virtual void __unk_vfn_250();
    /*251*/ virtual void kill();
    /*252*/ virtual void die(class ActorDamageSource const &);
    /*253*/ virtual bool shouldDropDeathLoot() const;
    /*266*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*268*/ virtual void __unk_vfn_268();
    /*269*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*272*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*273*/ virtual void addAdditionalSaveData(class CompoundTag &) const;
    /*274*/ virtual void _playStepSound(class BlockPos const &, class Block const &);
    /*276*/ virtual void __unk_vfn_276();
    /*281*/ virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    /*282*/ virtual void _onSizeUpdated();
    /*283*/ virtual void __unk_vfn_283();
    /*284*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*285*/ virtual void spawnAnim();
    /*286*/ virtual void setSprinting(bool);
    /*287*/ virtual enum LevelSoundEvent getHurtSound();
    /*288*/ virtual enum LevelSoundEvent getDeathSound();
    /*289*/ virtual float getSpeed() const;
    /*290*/ virtual void setSpeed(float);
    /*291*/ virtual void hurtEffects(class ActorDamageSource const &, float, bool, bool);
    /*292*/ virtual float getMeleeWeaponDamageBonus(class Mob *);
    /*293*/ virtual int getMeleeKnockbackBonus();
    /*294*/ virtual void travel(float, float, float);
    /*295*/ virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    /*296*/ virtual void applyFinalFriction(float, bool);
    /*297*/ virtual void aiStep();
    /*298*/ virtual void aiStep(struct IMobMovementProxy &) const;
    /*299*/ virtual void pushActors();
    /*300*/ virtual void lookAt(class Actor *, float, float);
    /*301*/ virtual bool isLookingAtAnEntity();
    /*302*/ virtual bool checkSpawnRules(bool);
    /*303*/ virtual bool checkSpawnObstruction() const;
    /*304*/ virtual float getAttackAnim(float);
    /*305*/ virtual int getItemUseDuration() const;
    /*306*/ virtual float getItemUseStartupProgress() const;
    /*307*/ virtual float getItemUseIntervalProgress() const;
    /*308*/ virtual int getItemUseIntervalAxis() const;
    /*309*/ virtual int getTimeAlongSwing() const;
    /*310*/ virtual void __unk_vfn_310();
    /*311*/ virtual float getMaxHeadXRot();
    /*312*/ virtual bool isAlliedTo(class Mob *);
    /*313*/ virtual bool doHurtTarget(class Actor *, enum ActorDamageCause const &);
    /*314*/ virtual void __unk_vfn_314();
    /*315*/ virtual void leaveCaravan();
    /*316*/ virtual void joinCaravan(class Mob *);
    /*317*/ virtual bool hasCaravanTail() const;
    /*318*/ virtual struct ActorUniqueID getCaravanHead() const;
    /*319*/ virtual int getArmorValue() const;
    /*320*/ virtual float getArmorCoverPercentage() const;
    /*321*/ virtual int getToughnessValue() const;
    /*322*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*323*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*324*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*325*/ virtual void sendArmor(class std::bitset<4>);
    /*326*/ virtual void containerChanged(int);
    /*327*/ virtual void updateEquipment();
    /*328*/ virtual int clearEquipment();
    /*329*/ virtual std::vector<int> getAllArmorID() const;
    /*330*/ virtual std::vector<class ItemStack const *> getAllHand() const;
    /*331*/ virtual std::vector<class ItemStack const *> getAllEquipment() const;
    /*332*/ virtual int getArmorTypeHash();
    /*333*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    /*334*/ virtual void dropEquipmentOnDeath();
    /*335*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*336*/ virtual void sendInventory(bool);
    /*337*/ virtual float getDamageAfterEnchantReduction(class ActorDamageSource const &, float) const;
    /*338*/ virtual float getDamageAfterArmorReduction(class ActorDamageSource const &, float) const;
    /*339*/ virtual float getDamageAfterResistanceEffect(class ActorDamageSource const &, float) const;
    /*340*/ virtual bool createAIGoals();
    /*341*/ virtual void onBorn(class Actor &, class Actor &);
    /*342*/ virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const &);
    /*343*/ virtual void setTransitioningSitting(bool);
    /*344*/ virtual void attackAnimation(class Actor *, float);
    /*345*/ virtual int getAttackTime();
    /*346*/ virtual float _getWalkTargetValue(class BlockPos const &);
    /*347*/ virtual bool canExistWhenDisallowMob() const;
    /*348*/ virtual void __unk_vfn_348();
    /*349*/ virtual void ascendLadder();
    /*350*/ virtual void ascendBlockByJumping();
    /*351*/ virtual void descendBlockByCrouching();
    /*352*/ virtual void dropContainer();
    /*353*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*354*/ virtual void jumpFromGround();
    /*355*/ virtual void jumpFromGround(struct IMobMovementProxy &) const;
    /*356*/ virtual void updateAi();
    /*357*/ virtual void newServerAiStep();
    /*358*/ virtual void _serverAiMobStep();
    /*359*/ virtual void dropBags();
    /*360*/ virtual void tickDeath();
    /*361*/ virtual void updateGliding();
    /*362*/ virtual void __unk_vfn_362();
    /*363*/ virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const &, class Vec3 const &) const;
};