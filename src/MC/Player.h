#pragma once

#include "Global.h"
#include "Mob.h"

class Player : public Mob {

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~Player();
    /*15*/ virtual void resetUserPos(bool);
    /*17*/ virtual void remove();
    /*24*/ virtual class Vec3 getAttachPos(enum ActorLocation, float) const;
    /*27*/ virtual void move(class Vec3 const &);
    /*28*/ virtual void move(struct IActorMovementProxy &, class Vec3 const &) const;
    /*35*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*39*/ virtual bool isFireImmune() const;
    /*40*/ virtual void __unk_vfn_40();
    /*43*/ virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    /*47*/ virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    /*48*/ virtual void normalTick();
    /*50*/ virtual void passengerTick();
    /*60*/ virtual void __unk_vfn_60();
    /*64*/ virtual std::string getFormattedNameTag() const;
    /*67*/ virtual void __unk_vfn_67();
    /*75*/ virtual void setBlockMovementSlowdownMultiplier(class BlockLegacy const &, class Vec3 const &);
    /*77*/ virtual float getCameraOffset() const;
    /*79*/ virtual float getShadowRadius() const;
    /*81*/ virtual void __unk_vfn_81();
    /*84*/ virtual void __unk_vfn_84();
    /*87*/ virtual void __unk_vfn_87();
    /*91*/ virtual bool isImmobile() const;
    /*93*/ virtual bool isSilentObserver() const;
    /*95*/ virtual void __unk_vfn_95();
    /*96*/ virtual bool isSleeping() const;
    /*97*/ virtual void setSleeping(bool);
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual bool isBlocking() const;
    /*101*/ virtual bool isDamageBlocked(class ActorDamageSource const &) const;
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*110*/ virtual void __unk_vfn_110();
    /*115*/ virtual bool attack(class Actor &, enum ActorDamageCause const &);
    /*128*/ virtual bool isJumping() const;
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /*139*/ virtual void onBounceStarted(class BlockPos const &, class Block const &);
    /*140*/ virtual void feed(int);
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*143*/ virtual class HashedString const & getActorRendererId() const;
    /*151*/ virtual void awardKillScore(class Actor &, int);
    /*152*/ virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    /*160*/ virtual void setCarriedItem(class ItemStack const &);
    /*161*/ virtual class ItemStack const & getCarriedItem() const;
    /*162*/ virtual void setOffhandSlot(class ItemStack const &);
    /*163*/ virtual class ItemStack const & getEquippedTotem() const;
    /*164*/ virtual bool consumeTotem();
    /*169*/ virtual enum ActorType getEntityTypeId() const;
    /*173*/ virtual bool canFreeze() const;
    /*177*/ virtual int getPortalCooldown() const;
    /*178*/ virtual int getPortalWaitTime() const;
    /*180*/ virtual bool canChangeDimensionsUsingPortal() const;
    /*181*/ virtual void __unk_vfn_181();
    /*190*/ virtual void onSynchedDataUpdate(int);
    /*191*/ virtual bool canAddPassenger(class Actor &) const;
    /*193*/ virtual bool canBePulledIntoVehicle() const;
    /*195*/ virtual void __unk_vfn_195();
    /*197*/ virtual void sendMotionPacketIfNeeded();
    /*200*/ virtual void startSwimming();
    /*201*/ virtual void stopSwimming();
    /*203*/ virtual enum CommandPermissionLevel getCommandPermissionLevel() const;
    /*215*/ virtual bool canObstructSpawningAndBlockPlacement() const;
    /*216*/ virtual class AnimationComponent & getAnimationComponent();
    /*219*/ virtual void useItem(class ItemStackBase &, enum ItemUseMethod, bool);
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*223*/ virtual float getMapDecorationRotation() const;
    /*229*/ virtual bool isWorldBuilder() const;
    /*230*/ virtual bool isCreative() const;
    /*231*/ virtual bool isAdventure() const;
    /*232*/ virtual bool isSurvival() const;
    /*233*/ virtual bool isSpectator() const;
    /*235*/ virtual bool add(class ItemStack &);
    /*236*/ virtual bool drop(class ItemStack const &, bool);
    /*244*/ virtual void startSpinAttack();
    /*245*/ virtual void stopSpinAttack();
    /*247*/ virtual void __unk_vfn_247();
    /*250*/ virtual void __unk_vfn_250();
    /*252*/ virtual void die(class ActorDamageSource const &);
    /*253*/ virtual bool shouldDropDeathLoot() const;
    /*260*/ virtual class std::optional<class BlockPos> getLastDeathPos() const;
    /*261*/ virtual class std::optional<class AutomaticID<class Dimension, int>> getLastDeathDimension() const;
    /*262*/ virtual bool hasDiedBefore() const;
    /*264*/ virtual bool _shouldProvideFeedbackOnHandContainerItemSet(enum HandSlot, class ItemStack const &) const;
    /*265*/ virtual bool _shouldProvideFeedbackOnArmorSet(enum ArmorSlot, class ItemStack const &) const;
    /*268*/ virtual void __unk_vfn_268();
    /*269*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*272*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*273*/ virtual void addAdditionalSaveData(class CompoundTag &) const;
    /*276*/ virtual void __unk_vfn_276();
    /*282*/ virtual void _onSizeUpdated();
    /*283*/ virtual void __unk_vfn_283();
    /*289*/ virtual float getSpeed() const;
    /*290*/ virtual void setSpeed(float);
    /*294*/ virtual void travel(float, float, float);
    /*295*/ virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    /*297*/ virtual void aiStep();
    /*298*/ virtual void aiStep(struct IMobMovementProxy &) const;
    /*305*/ virtual int getItemUseDuration() const;
    /*306*/ virtual float getItemUseStartupProgress() const;
    /*307*/ virtual float getItemUseIntervalProgress() const;
    /*310*/ virtual void __unk_vfn_310();
    /*314*/ virtual void __unk_vfn_314();
    /*330*/ virtual std::vector<class ItemStack const *> getAllHand() const;
    /*331*/ virtual std::vector<class ItemStack const *> getAllEquipment() const;
    /*333*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    /*334*/ virtual void dropEquipmentOnDeath();
    /*335*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*336*/ virtual void sendInventory(bool);
    /*347*/ virtual bool canExistWhenDisallowMob() const;
    /*348*/ virtual void __unk_vfn_348();
    /*353*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*354*/ virtual void jumpFromGround();
    /*355*/ virtual void jumpFromGround(struct IMobMovementProxy &) const;
    /*356*/ virtual void updateAi();
    /*361*/ virtual void updateGliding();
    /*362*/ virtual void __unk_vfn_362();
    /*364*/ virtual void prepareRegion(class ChunkSource &);
    /*365*/ virtual void destroyRegion();
    /*366*/ virtual void suspendRegion();
    /*367*/ virtual void resendAllChunks();
    /*368*/ virtual void _fireWillChangeDimension();
    /*369*/ virtual void _fireDimensionChanged();
    /*370*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*371*/ virtual void tickWorld(struct Tick const &);
    /*372*/ virtual void __unk_vfn_372() = 0;
    /*373*/ virtual std::vector<class ChunkPos> const & getTickingOffsets() const;
    /*374*/ virtual void moveView();
    /*375*/ virtual void moveSpawnView(class Vec3 const &, class AutomaticID<class Dimension, int>);
    /*376*/ virtual void setName(std::string const &);
    /*377*/ virtual enum TravelMethod getTravelledMethod() const;
    /*378*/ virtual void checkMovementStats(class Vec3 const &);
    /*379*/ virtual void __unk_vfn_379();
    /*380*/ virtual void __unk_vfn_380();
    /*381*/ virtual void respawn();
    /*382*/ virtual void __unk_vfn_382();
    /*383*/ virtual void __unk_vfn_383();
    /*384*/ virtual bool hasResource(int);
    /*385*/ virtual void completeUsingItem();
    /*386*/ virtual void startDestroying();
    /*387*/ virtual void stopDestroying();
    /*388*/ virtual void __unk_vfn_388();
    /*389*/ virtual void __unk_vfn_389();
    /*390*/ virtual void openTrading(struct ActorUniqueID const &, bool);
    /*391*/ virtual bool canOpenContainerScreen();
    /*392*/ virtual void __unk_vfn_392();
    /*393*/ virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    /*394*/ virtual void openInventory();
    /*395*/ virtual void displayClientMessage(std::string const &);
    /*396*/ virtual void displayChatMessage(std::string const &, std::string const &);
    /*397*/ virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    /*398*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    /*399*/ virtual void displayTextObjectWhisperMessage(std::string const &, std::string const &, std::string const &);
    /*400*/ virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    /*401*/ virtual enum BedSleepingResult startSleepInBed(class BlockPos const &);
    /*402*/ virtual void stopSleepInBed(bool, bool);
    /*403*/ virtual bool canStartSleepInBed();
    /*404*/ virtual int getSleepTimer() const;
    /*405*/ virtual int getPreviousTickSleepTimer() const;
    /*406*/ virtual void __unk_vfn_406();
    /*407*/ virtual void __unk_vfn_407();
    /*408*/ virtual bool isHostingPlayer() const;
    /*409*/ virtual bool isLoading() const;
    /*410*/ virtual bool isPlayerInitialized() const;
    /*411*/ virtual void __unk_vfn_411();
    /*412*/ virtual void registerTrackedBoss(struct ActorUniqueID);
    /*413*/ virtual void unRegisterTrackedBoss(struct ActorUniqueID);
    /*414*/ virtual void setPlayerGameType(enum GameType);
    /*415*/ virtual void initHUDContainerManager();
    /*416*/ virtual void _crit(class Actor &);
    /*417*/ virtual class IMinecraftEventing * getEventing() const;
    /*418*/ virtual void __unk_vfn_418();
    /*419*/ virtual void sendEventPacket(class EventPacket &) const;
    /*420*/ virtual void addExperience(int);
    /*421*/ virtual void addLevels(int);
    /*422*/ virtual void setContainerData(class IContainerManager &, int, int) = 0;
    /*423*/ virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool) = 0;
    /*424*/ virtual void inventoryChanged(class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    /*425*/ virtual void refreshContainer(class IContainerManager &) = 0;
    /*426*/ virtual void deleteContainerManager();
    /*427*/ virtual void setFieldOfViewModifier(float);
    /*428*/ virtual bool isActorRelevant(class Actor const &);
    /*429*/ virtual bool isTeacher() const = 0;
    /*430*/ virtual void onSuspension();
    /*431*/ virtual void onLinkedSlotsChanged();
    /*432*/ virtual void startCooldown(class Item const *, bool);
    /*433*/ virtual int getItemCooldownLeft(class HashedString const &) const;
    /*434*/ virtual int getItemCooldownLeft(unsigned __int64) const;
    /*435*/ virtual int getMaxItemCooldownLeft() const;
    /*436*/ virtual bool isItemOnCooldown(class HashedString const &) const;
    /*437*/ virtual void sendInventoryTransaction(class InventoryTransaction const &) const = 0;
    /*438*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const = 0;
    /*439*/ virtual void sendNetworkPacket(class Packet &) const;
    /*440*/ virtual class PlayerEventCoordinator & getPlayerEventCoordinator() = 0;
    /*441*/ virtual class MoveInputHandler * tryGetMoveInputHandler() const = 0;
    /*442*/ virtual enum InputMode getInputMode() const = 0;
    /*443*/ virtual enum ClientPlayMode getPlayMode() const = 0;
    /*444*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*445*/ virtual void __unk_vfn_445();
    /*446*/ virtual std::string getXuid() const;
    /*447*/ virtual struct PlayerMovementSettings const & getMovementSettings() const;
    /*448*/ virtual void addSavedChunk(class ChunkPos const &);
    /*449*/ virtual void onMovePlayerPacketNormal(class Vec3 const &, class Vec2 const &, float);
    /*450*/ virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource &);
    /*451*/ virtual void* getEditorPlayer() const = 0;
    /*452*/ virtual void destroyEditorPlayer() = 0;
};